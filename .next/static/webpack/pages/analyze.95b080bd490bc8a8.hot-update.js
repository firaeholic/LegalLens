"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/analyze",{

/***/ "./lib/apiClient.ts":
/*!**************************!*\
  !*** ./lib/apiClient.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: function() { return /* binding */ APIClient; },\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./lib/utils.ts\");\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/constants */ \"./config/constants.ts\");\n// API Client for LegalLens AI\n\n\nclass APIClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, timeout = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 30000;\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), timeout);\n        try {\n            const response = await fetch(\"\".concat(this.baseURL).concat(endpoint), {\n                ...options,\n                signal: controller.signal,\n                headers: {\n                    ...options.body instanceof FormData ? {} : {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    ...options.headers\n                }\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                const errorText = await response.text();\n                let errorData;\n                try {\n                    errorData = JSON.parse(errorText);\n                } catch (e) {\n                    errorData = {\n                        error: errorText\n                    };\n                }\n                throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(this.getErrorCode(response.status), errorData.error || \"HTTP \".concat(response.status, \": \").concat(response.statusText), {\n                    status: response.status,\n                    response: errorData\n                });\n            }\n            const data = await response.json();\n            if (data.error) {\n                throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.API_TIMEOUT, data.error, data);\n            }\n            return data;\n        } catch (error) {\n            clearTimeout(timeoutId);\n            if (error instanceof _utils__WEBPACK_IMPORTED_MODULE_0__.AppError) {\n                throw error;\n            }\n            if (error instanceof Error) {\n                if (error.name === \"AbortError\") {\n                    throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.API_TIMEOUT, \"Request timed out\");\n                }\n                if (error.message.includes(\"fetch\")) {\n                    throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.NETWORK_ERROR, \"Network error occurred\");\n                }\n            }\n            throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.NETWORK_ERROR, \"An unexpected error occurred\", error);\n        }\n    }\n    getErrorCode(status) {\n        switch(status){\n            case 400:\n                return _config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.INVALID_INPUT;\n            case 408:\n                return _config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.API_TIMEOUT;\n            case 413:\n                return _config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.FILE_TOO_LARGE;\n            case 415:\n                return _config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.UNSUPPORTED_FORMAT;\n            case 429:\n                return _config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.RATE_LIMITED;\n            case 500:\n            case 502:\n            case 503:\n            case 504:\n                return _config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.NETWORK_ERROR;\n            default:\n                return _config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.NETWORK_ERROR;\n        }\n    }\n    // OCR API\n    async extractText(file) {\n        _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Starting OCR extraction\", {\n            fileName: file.name,\n            fileSize: file.size\n        }, \"apiClient.extractText\");\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        try {\n            const result = await (0,_utils__WEBPACK_IMPORTED_MODULE_0__.retry)(()=>this.request(_config_constants__WEBPACK_IMPORTED_MODULE_1__.API_ENDPOINTS.OCR, {\n                    method: \"POST\",\n                    body: formData,\n                    headers: {} // Remove Content-Type to let browser set it for FormData\n                }, _config_constants__WEBPACK_IMPORTED_MODULE_1__.APP_CONFIG.apiTimeouts.OCR), 2, 2000 // 2 second delay\n            );\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"OCR extraction completed\", {\n                textLength: result.text.length,\n                confidence: result.confidence,\n                method: result.method\n            }, \"apiClient.extractText\");\n            return result;\n        } catch (error) {\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"OCR extraction failed\", error, \"apiClient.extractText\");\n            throw error instanceof _utils__WEBPACK_IMPORTED_MODULE_0__.AppError ? error : new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.OCR_FAILED, \"Failed to extract text\");\n        }\n    }\n    // Summarization API\n    async summarizeText(text) {\n        _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Starting text summarization\", {\n            textLength: text.length\n        }, \"apiClient.summarizeText\");\n        try {\n            const result = await (0,_utils__WEBPACK_IMPORTED_MODULE_0__.retry)(()=>this.request(_config_constants__WEBPACK_IMPORTED_MODULE_1__.API_ENDPOINTS.SUMMARIZE, {\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        text\n                    })\n                }, _config_constants__WEBPACK_IMPORTED_MODULE_1__.APP_CONFIG.apiTimeouts.SUMMARIZE), 2, 1500);\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Text summarization completed\", {\n                summaryLength: result.summary.length,\n                keyPointsCount: result.keyPoints.length,\n                compressionRatio: result.compressionRatio\n            }, \"apiClient.summarizeText\");\n            return result;\n        } catch (error) {\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Text summarization failed\", error, \"apiClient.summarizeText\");\n            throw error instanceof _utils__WEBPACK_IMPORTED_MODULE_0__.AppError ? error : new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.SUMMARIZATION_FAILED, \"Failed to summarize text\");\n        }\n    }\n    // Analysis API\n    async analyzeText(text) {\n        _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Starting text analysis\", {\n            textLength: text.length\n        }, \"apiClient.analyzeText\");\n        try {\n            const result = await (0,_utils__WEBPACK_IMPORTED_MODULE_0__.retry)(()=>this.request(_config_constants__WEBPACK_IMPORTED_MODULE_1__.API_ENDPOINTS.ANALYZE, {\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        text\n                    })\n                }, _config_constants__WEBPACK_IMPORTED_MODULE_1__.APP_CONFIG.apiTimeouts.ANALYZE), 2, 1500);\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Text analysis completed\", {\n                clausesCount: result.clauses.length,\n                riskScore: result.riskScore\n            }, \"apiClient.analyzeText\");\n            return result;\n        } catch (error) {\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Text analysis failed\", error, \"apiClient.analyzeText\");\n            throw error instanceof _utils__WEBPACK_IMPORTED_MODULE_0__.AppError ? error : new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.ANALYSIS_FAILED, \"Failed to analyze text\");\n        }\n    }\n    // Chat API\n    async chatWithDocument(question, context) {\n        _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Starting chat request\", {\n            questionLength: question.length,\n            contextLength: context.length\n        }, \"apiClient.chatWithDocument\");\n        try {\n            const result = await this.request(_config_constants__WEBPACK_IMPORTED_MODULE_1__.API_ENDPOINTS.CHAT, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    question,\n                    context\n                })\n            }, _config_constants__WEBPACK_IMPORTED_MODULE_1__.APP_CONFIG.apiTimeouts.CHAT);\n            // Transform the response to match ChatResponse interface\n            const chatResponse = {\n                answer: result.answer,\n                confidence: 0.8,\n                sources: [],\n                suggestedQuestions: [] // Could be enhanced to return suggestions\n            };\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Chat request completed\", {\n                answerLength: chatResponse.answer.length,\n                confidence: chatResponse.confidence\n            }, \"apiClient.chatWithDocument\");\n            return chatResponse;\n        } catch (error) {\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Chat request failed\", error, \"apiClient.chatWithDocument\");\n            throw error instanceof _utils__WEBPACK_IMPORTED_MODULE_0__.AppError ? error : new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.CHAT_FAILED, \"Failed to process chat request\");\n        }\n    }\n    // Visualization API\n    async generateVisualization(text, analysisResults) {\n        _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Starting visualization generation\", {\n            textLength: text.length\n        }, \"apiClient.generateVisualization\");\n        try {\n            const result = await this.request(_config_constants__WEBPACK_IMPORTED_MODULE_1__.API_ENDPOINTS.VISUALIZE, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    text,\n                    analysisResults\n                })\n            }, _config_constants__WEBPACK_IMPORTED_MODULE_1__.APP_CONFIG.apiTimeouts.VISUALIZE);\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Visualization generation completed\", {\n                nodesCount: result.flowData.nodes.length,\n                relationshipsCount: result.flowData.relationships.length\n            }, \"apiClient.generateVisualization\");\n            return result.flowData;\n        } catch (error) {\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Visualization generation failed\", error, \"apiClient.generateVisualization\");\n            throw error instanceof _utils__WEBPACK_IMPORTED_MODULE_0__.AppError ? error : new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(_config_constants__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES.ANALYSIS_FAILED, \"Failed to generate visualization\");\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const result = await this.request(\"/health\", {\n                method: \"GET\"\n            }, 5000);\n            return {\n                status: result.status || \"ok\",\n                timestamp: new Date()\n            };\n        } catch (error) {\n            _utils__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"Health check failed\", error, \"apiClient.healthCheck\");\n            return {\n                status: \"error\",\n                timestamp: new Date()\n            };\n        }\n    }\n    constructor(){\n        this.baseURL = \"/api\";\n    }\n}\n// Export singleton instance\nconst apiClient = new APIClient();\n// Export class for testing\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/apiClient.ts\n"));

/***/ })

});