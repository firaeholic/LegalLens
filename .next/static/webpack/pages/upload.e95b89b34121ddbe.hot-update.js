"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/upload",{

/***/ "./hooks/useFileUpload.ts":
/*!********************************!*\
  !*** ./hooks/useFileUpload.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFileUpload: function() { return /* binding */ useFileUpload; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/utils */ \"./lib/utils.ts\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/validation */ \"./lib/validation.ts\");\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/constants */ \"./config/constants.ts\");\n// Custom hook for file upload functionality\n\n\n\n\nfunction useFileUpload() {\n    const [uploadedFile, setUploadedFile] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isDragActive, setIsDragActive] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [uploadError, setUploadError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isProcessing, setIsProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const fileInputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const processFile = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (file)=>{\n        setIsProcessing(true);\n        setUploadError(null);\n        try {\n            // Enhanced file validation with detailed logging\n            _lib_utils__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"Starting file validation\", {\n                fileName: file.name,\n                fileSize: file.size,\n                fileType: file.type,\n                lastModified: file.lastModified\n            }, \"useFileUpload\");\n            const validation = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_2__.validateFile)(file);\n            if (!validation.isValid) {\n                const errorMessage = validation.error || \"Invalid file type or format\";\n                _lib_utils__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"File validation failed\", {\n                    fileName: file.name,\n                    fileType: file.type,\n                    error: errorMessage,\n                    warnings: validation.warnings\n                }, \"useFileUpload\");\n                throw new Error(errorMessage);\n            }\n            if (validation.warnings && validation.warnings.length > 0) {\n                _lib_utils__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\"File validation warnings\", {\n                    fileName: file.name,\n                    warnings: validation.warnings\n                }, \"useFileUpload\");\n            }\n            _lib_utils__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"Processing uploaded file\", {\n                fileName: file.name,\n                fileSize: file.size,\n                fileType: file.type\n            }, \"useFileUpload\");\n            // Convert to base64 for processing\n            const base64 = await (0,_lib_utils__WEBPACK_IMPORTED_MODULE_1__.convertFileToBase64)(file);\n            const uploadedFile = {\n                file,\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                base64,\n                uploadedAt: new Date()\n            };\n            setUploadedFile(uploadedFile);\n            _lib_utils__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"File processed successfully\", {\n                fileName: file.name,\n                base64Length: base64.length\n            }, \"useFileUpload\");\n            return uploadedFile;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to process file\";\n            setUploadError(errorMessage);\n            _lib_utils__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"File processing failed\", error, \"useFileUpload\");\n            throw error;\n        } finally{\n            setIsProcessing(false);\n        }\n    }, []);\n    const handleFileSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (files)=>{\n        const fileArray = Array.from(files);\n        if (fileArray.length === 0) {\n            return;\n        }\n        if (fileArray.length > 1) {\n            setUploadError(\"Please select only one file at a time\");\n            return;\n        }\n        const file = fileArray[0];\n        try {\n            await processFile(file);\n        } catch (error) {\n        // Error is already handled in processFile\n        }\n    }, [\n        processFile\n    ]);\n    const handleDrop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (e)=>{\n        e.preventDefault();\n        setIsDragActive(false);\n        const files = e.dataTransfer.files;\n        await handleFileSelect(files);\n    }, [\n        handleFileSelect\n    ]);\n    const handleDragOver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        e.preventDefault();\n        setIsDragActive(true);\n    }, []);\n    const handleDragLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        e.preventDefault();\n        setIsDragActive(false);\n    }, []);\n    const handleInputChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (e)=>{\n        const files = e.target.files;\n        if (files) {\n            await handleFileSelect(files);\n        }\n    }, [\n        handleFileSelect\n    ]);\n    const openFileDialog = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        var _fileInputRef_current;\n        (_fileInputRef_current = fileInputRef.current) === null || _fileInputRef_current === void 0 ? void 0 : _fileInputRef_current.click();\n    }, []);\n    const clearFile = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setUploadedFile(null);\n        setUploadError(null);\n        setIsProcessing(false);\n        // Reset file input\n        if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n        }\n        _lib_utils__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"File cleared\", {}, \"useFileUpload\");\n    }, []);\n    const retryUpload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.file) {\n            try {\n                await processFile(uploadedFile.file);\n            } catch (error) {\n            // Error is already handled in processFile\n            }\n        }\n    }, [\n        uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.file,\n        processFile\n    ]);\n    // Get file preview URL for images\n    const getPreviewUrl = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!(uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.file)) return null;\n        if (uploadedFile.file.type.startsWith(\"image/\")) {\n            return URL.createObjectURL(uploadedFile.file);\n        }\n        return null;\n    }, [\n        uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.file\n    ]);\n    // Get file icon based on type\n    const getFileIcon = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!(uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.type)) return \"file\";\n        if (uploadedFile.type === \"application/pdf\") return \"file-text\";\n        if (uploadedFile.type.startsWith(\"image/\")) return \"image\";\n        if (uploadedFile.type.includes(\"word\")) return \"file-text\";\n        if (uploadedFile.type.includes(\"text\")) return \"file-text\";\n        return \"file\";\n    }, [\n        uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.type\n    ]);\n    // Check if file type is supported\n    const isFileTypeSupported = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((file)=>{\n        return _config_constants__WEBPACK_IMPORTED_MODULE_3__.APP_CONFIG.supportedFormats.some((format)=>{\n            if (format.startsWith(\".\")) {\n                return file.name.toLowerCase().endsWith(format.toLowerCase());\n            }\n            return file.type === format;\n        });\n    }, []);\n    // Get upload progress (for future enhancement)\n    const getUploadProgress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (isProcessing) return 50 // Simulated progress\n        ;\n        if (uploadedFile) return 100;\n        return 0;\n    }, [\n        isProcessing,\n        uploadedFile\n    ]);\n    return {\n        uploadedFile,\n        isDragActive,\n        uploadError,\n        isProcessing,\n        fileInputRef,\n        handleDrop,\n        handleDragOver,\n        handleDragLeave,\n        handleInputChange,\n        openFileDialog,\n        clearFile,\n        retryUpload,\n        getPreviewUrl,\n        getFileIcon,\n        isFileTypeSupported,\n        getUploadProgress\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useFileUpload.ts\n"));

/***/ }),

/***/ "./lib/validation.ts":
/*!***************************!*\
  !*** ./lib/validation.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createValidationSchema: function() { return /* binding */ createValidationSchema; },\n/* harmony export */   sanitizeText: function() { return /* binding */ sanitizeText; },\n/* harmony export */   validateApiRequest: function() { return /* binding */ validateApiRequest; },\n/* harmony export */   validateBatch: function() { return /* binding */ validateBatch; },\n/* harmony export */   validateClauseType: function() { return /* binding */ validateClauseType; },\n/* harmony export */   validateConfidence: function() { return /* binding */ validateConfidence; },\n/* harmony export */   validateEmail: function() { return /* binding */ validateEmail; },\n/* harmony export */   validateFile: function() { return /* binding */ validateFile; },\n/* harmony export */   validateJson: function() { return /* binding */ validateJson; },\n/* harmony export */   validateRiskLevel: function() { return /* binding */ validateRiskLevel; },\n/* harmony export */   validateText: function() { return /* binding */ validateText; },\n/* harmony export */   validateUrl: function() { return /* binding */ validateUrl; }\n/* harmony export */ });\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/constants */ \"./config/constants.ts\");\n// Input validation utilities\n\n// File validation\nfunction validateFile(file) {\n    const warnings = [];\n    // Check file size\n    if (file.size > _config_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.maxFileSize) {\n        return {\n            isValid: false,\n            error: \"File size (\".concat(formatFileSize(file.size), \") exceeds maximum allowed size (\").concat(formatFileSize(_config_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.maxFileSize), \")\")\n        };\n    }\n    // Check file type with comprehensive validation\n    const fileName = file.name.toLowerCase();\n    const fileType = file.type.toLowerCase();\n    // Define comprehensive MIME type mappings\n    const validMimeTypes = new Set([\n        \"application/pdf\",\n        \"image/png\",\n        \"image/jpeg\",\n        \"image/jpg\",\n        \"image/webp\"\n    ]);\n    // Define valid file extensions\n    const validExtensions = new Set([\n        \".pdf\",\n        \".png\",\n        \".jpg\",\n        \".jpeg\",\n        \".webp\"\n    ]);\n    // Check by MIME type first\n    const isValidMimeType = validMimeTypes.has(fileType);\n    // Check by file extension as fallback\n    const hasValidExtension = validExtensions.some((ext)=>fileName.endsWith(ext));\n    // Additional check for common PNG variations\n    const isPngFile = fileType.includes(\"png\") || fileName.endsWith(\".png\");\n    const isJpegFile = fileType.includes(\"jpeg\") || fileType.includes(\"jpg\") || fileName.endsWith(\".jpg\") || fileName.endsWith(\".jpeg\");\n    const isPdfFile = fileType.includes(\"pdf\") || fileName.endsWith(\".pdf\");\n    const isWebpFile = fileType.includes(\"webp\") || fileName.endsWith(\".webp\");\n    const isValidType = isValidMimeType || hasValidExtension || isPngFile || isJpegFile || isPdfFile || isWebpFile;\n    if (!isValidType) {\n        return {\n            isValid: false,\n            error: 'File type \"'.concat(file.type || \"unknown\", '\" is not supported. Supported formats: ').concat(_config_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONFIG.supportedFormats.join(\", \"))\n        };\n    }\n    // Check file name\n    if (file.name.length > 255) {\n        warnings.push(\"File name is very long and may cause issues\");\n    }\n    // Check for potentially problematic characters\n    const problematicChars = /[<>:\"|?*\\x00-\\x1f]/;\n    if (problematicChars.test(file.name)) {\n        warnings.push(\"File name contains special characters that may cause issues\");\n    }\n    // Warn about very small files\n    if (file.size < 100) {\n        warnings.push(\"File is very small and may not contain meaningful content\");\n    }\n    return {\n        isValid: true,\n        warnings: warnings.length > 0 ? warnings : undefined\n    };\n}\n// Text validation\nfunction validateText(text) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const { minLength = 1, maxLength = 1000000, required = true, allowEmpty = false } = options;\n    if (required && !text) {\n        return {\n            isValid: false,\n            error: \"Text is required\"\n        };\n    }\n    if (!allowEmpty && text.trim().length === 0) {\n        return {\n            isValid: false,\n            error: \"Text cannot be empty\"\n        };\n    }\n    if (text.length < minLength) {\n        return {\n            isValid: false,\n            error: \"Text must be at least \".concat(minLength, \" characters long\")\n        };\n    }\n    if (text.length > maxLength) {\n        return {\n            isValid: false,\n            error: \"Text must not exceed \".concat(maxLength, \" characters\")\n        };\n    }\n    const warnings = [];\n    // Check for suspicious content\n    if (text.includes(\"<script>\") || text.includes(\"javascript:\")) {\n        warnings.push(\"Text contains potentially unsafe content\");\n    }\n    // Check for very repetitive content\n    const words = text.split(/\\s+/);\n    const uniqueWords = new Set(words);\n    if (words.length > 100 && uniqueWords.size / words.length < 0.1) {\n        warnings.push(\"Text appears to be very repetitive\");\n    }\n    return {\n        isValid: true,\n        warnings: warnings.length > 0 ? warnings : undefined\n    };\n}\n// API request validation\nfunction validateApiRequest(data, schema) {\n    const { requiredFields, optionalFields = [], maxSize = 10 * 1024 * 1024 } = schema;\n    if (!data || typeof data !== \"object\") {\n        return {\n            isValid: false,\n            error: \"Request data must be an object\"\n        };\n    }\n    // Check required fields\n    for (const field of requiredFields){\n        if (!(field in data) || data[field] === undefined || data[field] === null) {\n            return {\n                isValid: false,\n                error: 'Required field \"'.concat(field, '\" is missing')\n            };\n        }\n    }\n    // Check for unexpected fields\n    const allowedFields = [\n        ...requiredFields,\n        ...optionalFields\n    ];\n    const unexpectedFields = Object.keys(data).filter((key)=>!allowedFields.includes(key));\n    if (unexpectedFields.length > 0) {\n        return {\n            isValid: false,\n            error: \"Unexpected fields: \".concat(unexpectedFields.join(\", \"))\n        };\n    }\n    // Check data size\n    const dataSize = JSON.stringify(data).length;\n    if (dataSize > maxSize) {\n        return {\n            isValid: false,\n            error: \"Request data size (\".concat(formatFileSize(dataSize), \") exceeds maximum allowed size (\").concat(formatFileSize(maxSize), \")\")\n        };\n    }\n    return {\n        isValid: true\n    };\n}\n// Sanitize text input\nfunction sanitizeText(text) {\n    if (!text) return \"\";\n    return text// Remove null bytes\n    .replace(/\\0/g, \"\")// Normalize whitespace\n    .replace(/\\s+/g, \" \")// Trim\n    .trim()// Remove potentially dangerous HTML/JS\n    .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, \"\").replace(/javascript:/gi, \"\").replace(/on\\w+\\s*=/gi, \"\");\n}\n// Validate risk level\nfunction validateRiskLevel(riskLevel) {\n    return [\n        \"low\",\n        \"medium\",\n        \"high\"\n    ].includes(riskLevel);\n}\n// Validate clause type\nfunction validateClauseType(clauseType) {\n    return [\n        \"termination\",\n        \"payment\",\n        \"liability\",\n        \"confidentiality\",\n        \"intellectual_property\",\n        \"dispute_resolution\",\n        \"force_majeure\",\n        \"governing_law\",\n        \"amendment\",\n        \"assignment\",\n        \"warranty\",\n        \"indemnification\",\n        \"compliance\",\n        \"data_protection\",\n        \"other\"\n    ].includes(clauseType);\n}\n// Validate email format\nfunction validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!email) {\n        return {\n            isValid: false,\n            error: \"Email is required\"\n        };\n    }\n    if (!emailRegex.test(email)) {\n        return {\n            isValid: false,\n            error: \"Invalid email format\"\n        };\n    }\n    if (email.length > 254) {\n        return {\n            isValid: false,\n            error: \"Email is too long\"\n        };\n    }\n    return {\n        isValid: true\n    };\n}\n// Validate URL format\nfunction validateUrl(url) {\n    if (!url) {\n        return {\n            isValid: false,\n            error: \"URL is required\"\n        };\n    }\n    try {\n        const urlObj = new URL(url);\n        // Check protocol\n        if (![\n            \"http:\",\n            \"https:\"\n        ].includes(urlObj.protocol)) {\n            return {\n                isValid: false,\n                error: \"URL must use HTTP or HTTPS protocol\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    } catch (e) {\n        return {\n            isValid: false,\n            error: \"Invalid URL format\"\n        };\n    }\n}\n// Validate JSON string\nfunction validateJson(jsonString) {\n    if (!jsonString) {\n        return {\n            isValid: false,\n            error: \"JSON string is required\"\n        };\n    }\n    try {\n        JSON.parse(jsonString);\n        return {\n            isValid: true\n        };\n    } catch (error) {\n        return {\n            isValid: false,\n            error: \"Invalid JSON: \".concat(error instanceof Error ? error.message : \"Unknown error\")\n        };\n    }\n}\n// Validate confidence score\nfunction validateConfidence(confidence) {\n    if (typeof confidence !== \"number\") {\n        return {\n            isValid: false,\n            error: \"Confidence must be a number\"\n        };\n    }\n    if (confidence < 0 || confidence > 1) {\n        return {\n            isValid: false,\n            error: \"Confidence must be between 0 and 1\"\n        };\n    }\n    return {\n        isValid: true\n    };\n}\n// Helper function to format file size\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\n        \"Bytes\",\n        \"KB\",\n        \"MB\",\n        \"GB\"\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n}\n// Batch validation for multiple inputs\nfunction validateBatch(validations) {\n    const errors = [];\n    const warnings = [];\n    for (const validate of validations){\n        const result = validate();\n        if (!result.isValid && result.error) {\n            errors.push(result.error);\n        }\n        if (result.warnings) {\n            warnings.push(...result.warnings);\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        error: errors.length > 0 ? errors.join(\"; \") : undefined,\n        warnings: warnings.length > 0 ? warnings : undefined\n    };\n}\n// Create validation schema\nfunction createValidationSchema(validators) {\n    return (data)=>{\n        const errors = [];\n        const warnings = [];\n        for (const [key, validator] of Object.entries(validators)){\n            if (validator && key in data) {\n                const result = validator(data[key]);\n                if (!result.isValid && result.error) {\n                    errors.push(\"\".concat(key, \": \").concat(result.error));\n                }\n                if (result.warnings) {\n                    warnings.push(...result.warnings.map((w)=>\"\".concat(key, \": \").concat(w)));\n                }\n            }\n        }\n        return {\n            isValid: errors.length === 0,\n            error: errors.length > 0 ? errors.join(\"; \") : undefined,\n            warnings: warnings.length > 0 ? warnings : undefined\n        };\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/validation.ts\n"));

/***/ })

});